PART ONE: SETTING UP YOUR ENVIRONMENT FOR RUNNING THE CODES

1. Download Anaconda3 - Ideally- place in a folder with no spaces in it's $PATH$. (Eg. Do not use C:\Users\Lab Computer\Anaconda3) - C:\Users\labcomp\Anaconda3 would be better
    https://www.anaconda.com/products/individual
    Open Anaconda Prompt after installation has completed
2. Download github and clone both the SMCpy git, and the Arbitrary Texture Inversion git
    https://git-scm.com/downloads
    Open git bash
    Navigate to a directory that you would like to be the "working directory" for these codes
    in git bash, this is done using the "cd" command, followed by the path of interest
        for example - cd C:\Users\working_directory_textureinversion
    all git directories will now pop up as folders within the folder "working_directory_textureinversion"
    run commands >> git clone https://github.com/nasa/SMCPy.git SMCPy
    >> git clone https://github.com/jrossin/SMC_arbitrary_symmetry_texture_inversion.git (#NAMEOFINTEREST)
3. Navigate to the created folder from the end of step 3 (given as NAMEOFINTEREST). Create a virtual environment for python based on the environment.yml file in the git repo
if working with an anaconda installation in windows
>>conda env create -f environmentwinconda.yml
if working with an anaconda install on linux/ ubuntu
>>conda env create -f environmentubuntu20.yml
This will initialize a new conda environment with name py3smcpy
4. Activate (enter) the virtual environment you created, and download these packages into it.
    >>activate py3smcpy
    Download Mpi4py if you desire to parallelize your simulations
    >> conda install mpi4py
    OR
    >>conda install -c intel mpi4py
5. Link SMCpy directory to the anaconda path using the following command and replacing *PATHTOGITDIRECTORY* with the location of the local SMCPy git repository
    >> conda develop *PATHTOSMCLOCALGITDIRECTORY*
    This will create a conda.pth file within the py2 environment, linking the SMCPy file path to any file that runs in anaconda - adding other files to this text document will enable you to link directories to the system path in the future


PART TWO: RUNNING THE CODES/ PREPARING A RUN
1. Ensure that all errors are cleared when navigating within anaconda, these are generally system specific but can mess things up. Resources such as stackexchange are generally sufficient for this purpose.
2. All user input is handled within the run_interface.py file. Changing the variable "problem_type" within the run_interface.py file will change from a forward model evaluation to an inverse model evaluation. All variables relevant for either a forward or inverse model are in the header (dimensions, density), or within the respective "if" statement for each condition
    The "run_interface.py" file should be editable within any text editor, and simply saving it prior to running will update the values.
    Running the actual file occurs in the anaconda prompt, once navigated to the folder that contains "run_interface.py"
3. Forward models: required information
    Sample parallelepiped dimensions(x,y,z), in units of meters
    Polynomial order of the approximation (8-16, even numbers only), 10 or 12 is a good place to start
    Density of the material in question (units of kg/m^3)
    Number of desired output frequencies (50-100 is generally sufficient)
    List of elastic constants (Cij, in GPa) or texture coefficients (Clmn or Vijkl) (known), to simulate the resultant resonance frequencies of the specimen
    For a texture forward model, the 3 single crystal elastic constants of the microscopically cubic material, inputted as sc11 (C11), sc12 (C12), and sc44(C44)

4. A basic forward model can be run using the run_interface.py file.
    in anaconda - navigate to the RUS_inv_tex_arbitrary folder (while in the py2 virtual environment)
    >> python run_interface.py

5. For an inverse model:
    -Sample parallelepiped dimensions(x,y,z), in units of meters
    -Polynomial order of the approximation (8-16, even numbers only), 10 or 12 is a good place to start
    -Density of the material in question (units of kg/m^3)
    -For a texture forward model, the 3 single crystal elastic constants of the microscopically cubic material, inputted as sc11 (C11), sc12 (C12), and sc44(C44)
    -List of experimental resonance frequencies in a file (feel free to copy and edit one of the existing ones, such as freq_data_ab_70), with your own list of resonance frequencies in kHz. The first line of the file should contain the number of resonance frequencies you want to use for your inversion. Update the "filename" variable in run_interface.py to your new filename
    -Ranges of of elastic constants (Cij, in GPa) or texture coefficients (Clmn or Vijkl) to solve for during the inference - this is contained in the "params dictionary"
    -The number of chains (independent simulations) to run. Typically 1 is sufficient, though more are possible for parameter studies
    -SMCPy specific parameters such as particle count, timesteps, and mcmc (markoc chain monte carlo) steps must be specified. These can be understood from the publication "Efficient Sequential Monte-Carlo Samplers for Bayesian Inference" by Nguyen et al.; They are also well summarized within the SMCPy package instructions. The parameters are linked to the complexity of your inversion, and higher numbers require greater time but yield greater precision of results.
6. To run an inverse model (this can be computationally intensive)
    This will utilize the mpi4py package and a set number of cores (<number of cores below> as an integer)
    >>mpiexec -n <number of cores> python run_interface.py

